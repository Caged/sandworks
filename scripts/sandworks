#!/usr/bin/env python

import argparse
import importlib
import sandworks
from sandworks.generators import playground
import os

parser = argparse.ArgumentParser(description='Generate some cool spline art')

subparsers = parser.add_subparsers(
    dest='generator',
    title='Generators',
    description='Types of generator subcommands')

playground_parser = subparsers.add_parser('playground')
horizontal_spline_parser = subparsers.add_parser('horizontal_spline')

sub_parsers = [
    playground_parser,
    horizontal_spline_parser
]

playground_parser.add_argument(
    '--count',
    default=10000,
    type=int,
    help='number of noise itterations')

horizontal_spline_parser.add_argument(
    '--lines',
    default=50,
    type=int,
    help='number of lines to draw')

horizontal_spline_parser.add_argument(
    '--save-every',
    default=500,
    type=int,
    help='Number of drawing iterations before writing a frame to PNG')

horizontal_spline_parser.add_argument(
    '--margin',
    default=100,
    type=int,
    help='Margin around borders of artwork canvas')

for sub_parser in sub_parsers:
    sub_parser.add_argument(
        '--color',
        default='cc0000',
        type=lambda d: d.replace('#', ''),
        help='Color of sand')
    sub_parser.add_argument(
        '--bg-color',
        default='ffffff',
        type=lambda d: d.replace('#', ''),
        help='Color of background')
    sub_parser.add_argument(
        '--width',
        default=1500,
        type=int,
        help='pixel size of width')
    sub_parser.add_argument(
        '--height',
        default=1500,
        type=int,
        help='pixel size of height')
    sub_parser.add_argument(
        '--out-dir',
        default='tmp',
        type=str,
        help='directory to output results')
    sub_parser.add_argument(
        '--frame-prefix',
        default='timestamp',
        type=str,
        choices=('timestamp', 'frame'),
        help='pixel size of height')

args = parser.parse_args()
generator_name = "sandworks.generators.{}".format(args.generator)

try:
    os.makedirs(args.out_dir, exist_ok=True)
    generate_function = getattr(importlib.import_module(generator_name), 'generate')
    generate_function(args)
except Exception as e:
    raise e
